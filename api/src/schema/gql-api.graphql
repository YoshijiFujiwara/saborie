type User {
	id: ID!
	email: String!
	post: [Post!]!
	createdAt: String!
	updatedAt: String!
}

type Post {
	id: ID!
	todo: String!
	mistake: String!
	minutes: Int!
	excuse: String
	author: User!
	comments: [Comment]
	likes: [Like]
}

type Comment {
	id: ID!
	body: String!
	post: Post!
	author: User!
}

type Like {
	id: ID!
	post: Post!
	author: User!
}

input SignUpInput {
	email: String!
	password: String!
}

input LoginInput {
	email: String!
	password: String!
}

input PostInput {
	todo: String!
	mistake: String!
	minutes: Int!
	excuse: String
}

input CommentInput {
	postId: ID!
	body: String!
}

input LikeInput {
	postId: ID!
}

type AuthPayload {
	id: ID!
	email: String!
}

type Query {
	me: AuthPayload!
	post(id: ID!): Post!
	posts: [Post!]!
	postsByKeyword(keyword: String!): [Post!]!
}

type Mutation {
	signUp(signUpInput: SignUpInput): AuthPayload!
	login(loginInput: LoginInput): AuthPayload!
	signOut: Boolean!
	createPost(postInput: PostInput): Post!
	createComment(commentInput: CommentInput): Comment!
	switchLike(likeInput: LikeInput): Like
}